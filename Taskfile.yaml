# This file can be run with the `task` utility: https://taskfile.dev/
version: '3'

dotenv: ['.env', '.env.local']

vars:
  APP_VERSION_FILE: './lib/version/app-version.go'
  ENTRY_FILENAME: './main.go'
  BUILD_OUTPUT_DIR: './dist'
  BINARY_FILENAME: 'eget'
  DIST_TARGET_FILE: '{{.BUILD_OUTPUT_DIR}}/{{.BINARY_FILENAME}}'
  GIT_COMMIT:
    sh: git log -n 1 --format=%h
  GOLANGCILINT_CMD_DIRS:
    sh: find . -name "*.go" -printf '%h\n' | sort -u | egrep -v '^.$' | grep -v './tools' | sd '\n' ' ' | awk -F'|' '{ print $1 }'

tasks:

  mod:
    desc: Downloads and tidy Go modules
    cmds:
      - go mod download
      - go mod tidy

  test:
    desc: Runs tests
    dir: .
    cmds:
      - cd app && go test -cover -v . && cd ..
      - cd lib && go test -cover -v ./** && cd ..

  test-coverage:
    desc: Runs tests with coverage profiling
    dir: .
    cmds:
      - cd app && go test -cover -coverprofile=../coverage-app.out -v . && cd ..
      - cd lib && go test -cover -coverprofile=../coverage-lib.out -v ./** && cd ..

  fmt:
    desc: Formats the code
    cmds:
      - gofmt -s -w .

  build:
    desc: Builds binary
    preconditions:
      - task: mod
      - task: prepare-dist-folder
    sources:
      - ./lib/**/*.go
      - ./app/*.go
    generates:
      - '{{.DIST_TARGET_FILE}}'
    cmds:
      - go build -trimpath -ldflags="-s -w -X main.Version={{.VERSION}}-{{.GIT_COMMIT}}" -o {{.DIST_TARGET_FILE}} {{.ENTRY_FILENAME}}

  build-docs:
    desc: Builds documentation
    preconditions:
      - which pandoc
    sources:
      - man/eget.md
    generates:
      - eget.1
    cmds:
      - pandoc man/eget.md -s -t man -o eget.1

  build-all:
    desc: Builds everything
    cmds:
      - task build
      - task build-docs

  clean:
    desc: Cleans up build artifacts
    preconditions:
      - test -d {{.BUILD_OUTPUT_DIR}}
      - test -f {{.DIST_TARGET_FILE}}
    cmds:
      - rm -f {{.DIST_TARGET_FILE}}
      - rm test/eget.1 || true 
      - rm test/{fd,micro,nvim,pandoc,rg.exe} || true

  lint:
    desc: 'Lints the code with golangci-lint and optionally: actionlint, shellcheck, typos'
    preconditions:
      - which golangci-lint
    cmds:
      - golangci-lint run
      - which actionlint >/dev/null && actionlint || echo "actionlint not found, skipping..."
      - which shellcheck >/dev/null && shellcheck ./.custom-hooks/* || echo "shellcheck not found, skipping..."
      - which typos >/dev/null && typos -v || echo "typos not found, skipping..."

  update-version-file:
    cmds:
      - printf "package version\n\nvar Version = \"$(go run tools/build-version.go)+src\"" > {{.APP_VERSION_FILE}}

  prepare-dist-folder:
    desc: Prepares dist folder
    silent: true
    internal: true
    cmds:
      - mkdir -p {{.BUILD_OUTPUT_DIR}}
    status:
      - test -d {{.BUILD_OUTPUT_DIR}}

  autobuild:
    interactive: true
    desc: Watches for changes and automatically rebuilds the project binary, displays a minimal system notification on start/finish
    preconditions:
      - which watchexec
    cmds:
      - watchexec --exts go --fs-events create,modify,remove -N --debounce 300 -w ./app -w ./lib -- task build -f
